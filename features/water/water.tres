[gd_resource type="VisualShader" load_steps=67 format=3 uid="uid://btp1norcubigu"]

[sub_resource type="VisualShaderNodeGlobalExpression" id="VisualShaderNodeGlobalExpression_hmsgm"]
size = Vector2(960, 280)
expression = "vec3 getNormal(sampler2D height_map, vec2 uv, float texelSize) {
	vec4 s = textureGather(height_map, uv, 0);
	float t = s.r;
	float r = s.g;
	float l = s.b;
	float b = s.a;
    return -normalize(vec3(2.0 * (r - l), -4.0, 2.0 * (b - t)));
}
"

[sub_resource type="VisualShaderNodeLinearSceneDepth" id="VisualShaderNodeLinearSceneDepth_hmsgm"]

[sub_resource type="VisualShaderNodeExpression" id="VisualShaderNodeExpression_qs10t"]
size = Vector2(460, 340)
expression = "float d = linear_depth;
d = d + VERTEX.z;
depth = exp(-d * murkiness);"

[sub_resource type="VisualShaderNodeMix" id="VisualShaderNodeMix_joph6"]
default_input_values = [0, Vector3(0, 0, 0), 1, Vector3(1, 1, 1), 2, Vector3(0.5, 0.5, 0.5)]
op_type = 3

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_joph6"]
constant = 1.0

[sub_resource type="VisualShaderNodeMix" id="VisualShaderNodeMix_hmsgm"]
default_input_values = [0, Vector3(0, 0, 0), 1, Vector3(1, 1, 1), 2, Vector3(0.5, 0.5, 0.5)]
op_type = 3

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_joph6"]
expanded_output_ports = [0]
source = 1

[sub_resource type="VisualShaderNodeVectorOp" id="VisualShaderNodeVectorOp_hmsgm"]
default_input_values = [0, Vector2(0, 0), 1, Vector2(0, 0)]
op_type = 0

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_qs10t"]
input_name = "screen_uv"

[sub_resource type="VisualShaderNodeVectorOp" id="VisualShaderNodeVectorOp_joph6"]
default_input_values = [0, Vector2(0, 0), 1, Vector2(0, 0)]
op_type = 0
operator = 2

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_jmbdl"]
constant = 0.05

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_gafow"]
constant = 0.035

[sub_resource type="VisualShaderNodeColorConstant" id="VisualShaderNodeColorConstant_jmbdl"]
constant = Color(0, 0, 0, 1)

[sub_resource type="VisualShaderNodeColorConstant" id="VisualShaderNodeColorConstant_gafow"]
constant = Color(0.156128, 0.215423, 0.244137, 1)

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_mf4kj"]
constant = 0.446

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_jmbdl"]
expanded_output_ports = [0]
source = 1

[sub_resource type="VisualShaderNodeVectorOp" id="VisualShaderNodeVectorOp_gafow"]
default_input_values = [0, Vector2(0, 0), 1, Vector2(0, 0)]
op_type = 0

[sub_resource type="VisualShaderNodeVectorCompose" id="VisualShaderNodeVectorCompose_mf4kj"]

[sub_resource type="VisualShaderNodeVectorCompose" id="VisualShaderNodeVectorCompose_uwb16"]
op_type = 0

[sub_resource type="VisualShaderNodeFloatOp" id="VisualShaderNodeFloatOp_lrui1"]
default_input_values = [0, 1.0, 1, 400.0]
operator = 3

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_o57fn"]
expanded_output_ports = [0]
source = 1

[sub_resource type="VisualShaderNodeVectorOp" id="VisualShaderNodeVectorOp_wjknd"]
default_input_values = [0, Vector2(0, 0), 1, Vector2(0, 0)]
op_type = 0

[sub_resource type="VisualShaderNodeVectorCompose" id="VisualShaderNodeVectorCompose_d0bd5"]
op_type = 0

[sub_resource type="VisualShaderNodeFloatOp" id="VisualShaderNodeFloatOp_8qfj3"]
operator = 2

[sub_resource type="VisualShaderNodeReroute" id="VisualShaderNodeReroute_jmbdl"]
default_input_values = [0, Vector3(0, 0, 0)]
port_type = 4

[sub_resource type="VisualShaderNodeProximityFade" id="VisualShaderNodeProximityFade_gafow"]
default_input_values = [0, 0.08]

[sub_resource type="VisualShaderNodeUVFunc" id="VisualShaderNodeUVFunc_jmbdl"]

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_gafow"]
input_name = "time"

[sub_resource type="VisualShaderNodeVectorCompose" id="VisualShaderNodeVectorCompose_lrui1"]
op_type = 0

[sub_resource type="VisualShaderNodeTexture2DParameter" id="VisualShaderNodeTexture2DParameter_o57fn"]
parameter_name = "noise"
texture_type = 2
color_default = 2

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_j2msl"]
expanded_output_ports = [0]
source = 5

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_uwb16"]
constant = 0.7

[sub_resource type="VisualShaderNodeVectorRefract" id="VisualShaderNodeVectorRefract_lrui1"]

[sub_resource type="VisualShaderNodeExpression" id="VisualShaderNodeExpression_jmbdl"]
size = Vector2(980, 400)
expression = "float screen_center_distance = clamp(abs(length(screen_uv - vec2(0.5, 0.5))) * 2.0, 0.0, 1.0);
uv = vec2(screen_uv.x, screen_uv.y - (normal.y * strength / length(VERTEX)) * (1.0 - screen_center_distance));"

[sub_resource type="VisualShaderNodeBooleanConstant" id="VisualShaderNodeBooleanConstant_gafow"]
constant = true

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_mf4kj"]
input_name = "screen_uv"

[sub_resource type="VisualShaderNodeReroute" id="VisualShaderNodeReroute_gafow"]
default_input_values = [0, Vector2(0, 0)]
port_type = 3

[sub_resource type="VisualShaderNodeFloatOp" id="VisualShaderNodeFloatOp_jmbdl"]
default_input_values = [0, 0.0, 1, -0.02]
operator = 2

[sub_resource type="VisualShaderNodeVectorOp" id="VisualShaderNodeVectorOp_jmbdl"]
operator = 2

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_lrui1"]
constant = 0.6

[sub_resource type="VisualShaderNodeProximityFade" id="VisualShaderNodeProximityFade_jmbdl"]

[sub_resource type="VisualShaderNodeReroute" id="VisualShaderNodeReroute_mf4kj"]

[sub_resource type="VisualShaderNodeFloatOp" id="VisualShaderNodeFloatOp_uwb16"]
operator = 2

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_jmbdl"]
input_name = "normal"

[sub_resource type="VisualShaderNodeUVFunc" id="VisualShaderNodeUVFunc_gafow"]
default_input_values = [1, Vector2(2, 2), 2, Vector2(0, 0)]
function = 1

[sub_resource type="VisualShaderNodeMix" id="VisualShaderNodeMix_mf4kj"]
default_input_values = [0, Vector3(0, 0, 0), 1, Vector3(1, 1, 1), 2, 0.5]
op_type = 4

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_uwb16"]
expanded_output_ports = [0]
source = 5

[sub_resource type="VisualShaderNodeVectorCompose" id="VisualShaderNodeVectorCompose_o57fn"]
op_type = 0

[sub_resource type="VisualShaderNodeUVFunc" id="VisualShaderNodeUVFunc_wjknd"]

[sub_resource type="VisualShaderNodeFloatOp" id="VisualShaderNodeFloatOp_d0bd5"]
default_input_values = [0, 0.0, 1, 0.02]
operator = 2

[sub_resource type="VisualShaderNodeUVFunc" id="VisualShaderNodeUVFunc_8qfj3"]
default_input_values = [1, Vector2(4, 4), 2, Vector2(0, 0)]
function = 1

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_j2msl"]
input_name = "normal"

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_uwb16"]
output_port_for_preview = 0
expanded_output_ports = [0]
input_name = "color"

[sub_resource type="VisualShaderNodeTexture2DParameter" id="VisualShaderNodeTexture2DParameter_jmbdl"]
parameter_name = "Texture2DParameter"

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_gafow"]
source = 5

[sub_resource type="VisualShaderNodeGlobalExpression" id="VisualShaderNodeGlobalExpression_jmbdl"]
size = Vector2(940, 1440)
expression = "float D_GGX(float cos_theta_m, float alpha)
{
float alpha2 = alpha * alpha;
float d = 1.0 + (alpha2 - 1.0) * cos_theta_m * cos_theta_m;
return alpha2 / (PI * d * d);
}

float G_GGX_2cos(float cos_theta_m, float alpha)
{
float k = 0.5 * alpha;
return 0.5 / (cos_theta_m * (1.0 - k) + k);
}

vec3 F0(float metallic, float specular, vec3 albedo)
{
float dielectric = 0.16 * specular * specular;
return mix(vec3(dielectric), albedo, vec3(metallic));
}


float SchlickFresnel(float u)
{
float m = 1.0 - u;
float m2 = m * m;
return m2 * m2 * m;
}

void light()
{
vec3 lightColor = LIGHT_COLOR.rgb / PI;
// Diffuse light.
float NdotL = max(dot(NORMAL, LIGHT.rgb), 0.0);
DIFFUSE_LIGHT += clamp(dot(NORMAL, LIGHT.rgb), 0.0, 1.0) * ATTENUATION * lightColor;

// Specular light.
vec3 halfway = normalize(VIEW + LIGHT.rgb);
float NdotH = max(dot(NORMAL, halfway), 0.0);
float LdotH = max(dot(LIGHT.rgb, halfway), 0.0);
float NdotV = max(dot(NORMAL, VIEW), 0.0);

float alpha_ggx = ROUGHNESS * ROUGHNESS;
float D = D_GGX(NdotH, alpha_ggx);
float G = G_GGX_2cos(NdotL, alpha_ggx) * G_GGX_2cos(NdotV, alpha_ggx);    

vec3 f0 = F0(METALLIC, SPECULAR_AMOUNT, ALBEDO);
float cLdotH5 = SchlickFresnel(LdotH);
vec3 F = mix(vec3(cLdotH5), vec3(1.0), f0);

vec3 specular_brdf_NL = NdotL * D * F * G;

float specular_blob_intensity = 0.25;
SPECULAR_LIGHT += specular_brdf_NL * LIGHT_COLOR * specular_blob_intensity * ATTENUATION;
}"

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_hmsgm"]
input_name = "vertex"

[sub_resource type="VisualShaderNodeExpression" id="VisualShaderNodeExpression_16l0j"]
size = Vector2(1260, 540)
expression = "normal = getNormal(height_map, uv, 2.0 / 512.0);"

[sub_resource type="VisualShaderNodeTexture2DParameter" id="VisualShaderNodeTexture2DParameter_qs10t"]
parameter_name = "simulation2"

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_joph6"]
input_name = "uv"

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_hmsgm"]
expanded_output_ports = [0]
source = 5

[sub_resource type="VisualShaderNodeFloatOp" id="VisualShaderNodeFloatOp_qs10t"]
operator = 2

[sub_resource type="VisualShaderNodeFloatParameter" id="VisualShaderNodeFloatParameter_ehfbu"]
parameter_name = "amplitude"
default_value_enabled = true
default_value = 0.5

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_2r3x5"]
input_name = "normal"

[sub_resource type="VisualShaderNodeVectorOp" id="VisualShaderNodeVectorOp_8r8td"]
operator = 2

[sub_resource type="VisualShaderNodeVectorOp" id="VisualShaderNodeVectorOp_e8st6"]

[resource]
code = "shader_type spatial;
render_mode blend_mix, depth_draw_always, cull_back, diffuse_lambert, specular_disabled, shadows_disabled;

uniform sampler2D simulation2;
uniform float amplitude = 0.5;
uniform sampler2D depth_tex_frg_17 : hint_depth_texture;
uniform sampler2D depth_tex_frg_69 : hint_depth_texture;
uniform sampler2D screen_tex_frg_42 : hint_screen_texture;
uniform sampler2D screen_tex_frg_25 : hint_screen_texture;
uniform sampler2D screen_tex_frg_37 : hint_screen_texture;
uniform sampler2D depth_tex_frg_49 : hint_depth_texture;
uniform sampler2D noise : hint_normal;


// GlobalExpression:0
	vec3 getNormal(sampler2D height_map, vec2 uv, float texelSize) {
		vec4 s = textureGather(height_map, uv, 0);
		float t = s.r;
		float r = s.g;
		float l = s.b;
		float b = s.a;
	    return -normalize(vec3(2.0 * (r - l), -4.0, 2.0 * (b - t)));
	}
	
// GlobalExpression:1
	float D_GGX(float cos_theta_m, float alpha)
	{
	float alpha2 = alpha * alpha;
	float d = 1.0 + (alpha2 - 1.0) * cos_theta_m * cos_theta_m;
	return alpha2 / (PI * d * d);
	}
	
	float G_GGX_2cos(float cos_theta_m, float alpha)
	{
	float k = 0.5 * alpha;
	return 0.5 / (cos_theta_m * (1.0 - k) + k);
	}
	
	vec3 F0(float metallic, float specular, vec3 albedo)
	{
	float dielectric = 0.16 * specular * specular;
	return mix(vec3(dielectric), albedo, vec3(metallic));
	}
	
	
	float SchlickFresnel(float u)
	{
	float m = 1.0 - u;
	float m2 = m * m;
	return m2 * m2 * m;
	}
	
	void light()
	{
	vec3 lightColor = LIGHT_COLOR.rgb / PI;
	// Diffuse light.
	float NdotL = max(dot(NORMAL, LIGHT.rgb), 0.0);
	DIFFUSE_LIGHT += clamp(dot(NORMAL, LIGHT.rgb), 0.0, 1.0) * ATTENUATION * lightColor;
	
	// Specular light.
	vec3 halfway = normalize(VIEW + LIGHT.rgb);
	float NdotH = max(dot(NORMAL, halfway), 0.0);
	float LdotH = max(dot(LIGHT.rgb, halfway), 0.0);
	float NdotV = max(dot(NORMAL, VIEW), 0.0);
	
	float alpha_ggx = ROUGHNESS * ROUGHNESS;
	float D = D_GGX(NdotH, alpha_ggx);
	float G = G_GGX_2cos(NdotL, alpha_ggx) * G_GGX_2cos(NdotV, alpha_ggx);    
	
	vec3 f0 = F0(METALLIC, SPECULAR_AMOUNT, ALBEDO);
	float cLdotH5 = SchlickFresnel(LdotH);
	vec3 F = mix(vec3(cLdotH5), vec3(1.0), f0);
	
	vec3 specular_brdf_NL = NdotL * D * F * G;
	
	float specular_blob_intensity = 0.25;
	SPECULAR_LIGHT += specular_brdf_NL * LIGHT_COLOR * specular_blob_intensity * ATTENUATION;
	}

void vertex() {
// Input:10
	vec3 n_out10p0 = VERTEX;


// Input:7
	vec3 n_out7p0 = NORMAL;


// Input:3
	vec2 n_out3p0 = UV;


	vec4 n_out4p0;
// Texture2D:4
	n_out4p0 = texture(simulation2, n_out3p0);
	float n_out4p1 = n_out4p0.r;
	float n_out4p4 = n_out4p0.a;


// FloatParameter:6
	float n_out6p0 = amplitude;


// FloatOp:5
	float n_out5p0 = n_out4p1 * n_out6p0;


// VectorOp:8
	vec3 n_out8p0 = n_out7p0 * vec3(n_out5p0);


// VectorOp:9
	vec3 n_out9p0 = n_out10p0 + n_out8p0;


	vec3 n_out12p0;
// Expression:12
	n_out12p0 = vec3(0.0, 0.0, 0.0);
	{
		n_out12p0 = getNormal(simulation2, n_out3p0, 2.0 / 512.0);
	}


// Output:0
	VERTEX = n_out9p0;
	NORMAL = n_out12p0;
	COLOR.a = n_out4p4;


}

void fragment() {
// ColorConstant:35
	vec4 n_out35p0 = vec4(0.156128, 0.215423, 0.244137, 1.000000);


// ColorConstant:34
	vec4 n_out34p0 = vec4(0.000000, 0.000000, 0.000000, 1.000000);


// FloatConstant:36
	float n_out36p0 = 0.446000;


	float n_out17p0;
// LinearSceneDepth:17
	{
		float __log_depth = textureLod(depth_tex_frg_17, SCREEN_UV, 0.0).x;
	vec4 __depth_view = INV_PROJECTION_MATRIX * vec4(SCREEN_UV * 2.0 - 1.0, __log_depth, 1.0);
		__depth_view.xyz /= __depth_view.w;
		n_out17p0 = -__depth_view.z;
	}


	float n_out18p0;
// Expression:18
	n_out18p0 = 0.0;
	{
		float d = n_out17p0;
		d = d + VERTEX.z;
		n_out18p0 = exp(-d * n_out36p0);
	}


// Mix:19
	vec3 n_out19p0 = mix(vec3(n_out35p0.xyz), vec3(n_out34p0.xyz), vec3(n_out18p0));


// FloatOp:41
	float n_in41p0 = 1.00000;
	float n_in41p1 = 400.00000;
	float n_out41p0 = n_in41p0 / n_in41p1;


// FloatOp:45
	float n_out45p0 = n_out41p0 * n_out18p0;


// VectorCompose:44
	float n_in44p0 = 0.00000;
	vec2 n_out44p0 = vec2(n_in44p0, n_out45p0);


// Input:64
	vec2 n_out64p0 = SCREEN_UV;


// Input:73
	vec3 n_out73p0 = NORMAL;


// Reroute:48
	vec3 n_out48p0 = n_out73p0;


	float n_out69p0;
// ProximityFade:69
	float n_in69p0 = 1.00000;
	{
		float __depth_tex = texture(depth_tex_frg_69, SCREEN_UV).r;
		vec4 __depth_world_pos = INV_PROJECTION_MATRIX * vec4(SCREEN_UV * 2.0 - 1.0, __depth_tex, 1.0);
		__depth_world_pos.xyz /= __depth_world_pos.w;
		n_out69p0 = clamp(1.0 - smoothstep(__depth_world_pos.z + n_in69p0, __depth_world_pos.z, VERTEX.z), 0.0, 1.0);
	}


// FloatConstant:60
	float n_out60p0 = 0.700000;


// FloatOp:71
	float n_out71p0 = n_out69p0 * n_out60p0;


// Reroute:70
	float n_out70p0 = n_out71p0;


// BooleanConstant:63
	bool n_out63p0 = true;


	vec2 n_out62p0;
// Expression:62
	n_out62p0 = vec2(0.0, 0.0);
	{
		float screen_center_distance = clamp(abs(length(n_out64p0 - vec2(0.5, 0.5))) * 2.0, 0.0, 1.0);
		n_out62p0 = vec2(n_out64p0.x, n_out64p0.y - (n_out48p0.y * n_out70p0 / length(VERTEX)) * (1.0 - screen_center_distance));
	}


// Reroute:65
	vec2 n_out65p0 = n_out62p0;


// VectorOp:43
	vec2 n_out43p0 = n_out44p0 + n_out65p0;


	vec4 n_out42p0;
// Texture2D:42
	n_out42p0 = texture(screen_tex_frg_42, n_out43p0);
	float n_out42p1 = n_out42p0.r;


	vec4 n_out25p0;
// Texture2D:25
	n_out25p0 = texture(screen_tex_frg_25, n_out65p0);
	float n_out25p2 = n_out25p0.g;


// VectorCompose:40
	float n_in40p1 = 0.00000;
	vec2 n_out40p0 = vec2(n_out45p0, n_in40p1);


// VectorOp:38
	vec2 n_out38p0 = n_out40p0 + n_out65p0;


	vec4 n_out37p0;
// Texture2D:37
	n_out37p0 = texture(screen_tex_frg_37, n_out38p0);
	float n_out37p3 = n_out37p0.b;


// VectorCompose:39
	vec3 n_out39p0 = vec3(n_out42p1, n_out25p2, n_out37p3);


// FloatConstant:68
	float n_out68p0 = 0.600000;


// VectorOp:67
	vec3 n_out67p0 = n_out39p0 * vec3(n_out68p0);


// Mix:23
	vec3 n_out23p0 = mix(n_out19p0, n_out67p0, vec3(n_out18p0));


	float n_out49p0;
// ProximityFade:49
	float n_in49p0 = 0.08000;
	{
		float __depth_tex = texture(depth_tex_frg_49, SCREEN_UV).r;
		vec4 __depth_world_pos = INV_PROJECTION_MATRIX * vec4(SCREEN_UV * 2.0 - 1.0, __depth_tex, 1.0);
		__depth_world_pos.xyz /= __depth_world_pos.w;
		n_out49p0 = clamp(1.0 - smoothstep(__depth_world_pos.z + n_in49p0, __depth_world_pos.z, VERTEX.z), 0.0, 1.0);
	}


// FloatConstant:32
	float n_out32p0 = 0.050000;


// FloatConstant:33
	float n_out33p0 = 0.035000;


// Input:82
	vec3 n_out82p0 = NORMAL;


// Input:53
	float n_out53p0 = TIME;


// FloatOp:66
	float n_in66p1 = -0.02000;
	float n_out66p0 = n_out53p0 * n_in66p1;


// VectorCompose:54
	float n_in54p0 = 0.00000;
	vec2 n_out54p0 = vec2(n_in54p0, n_out66p0);


// UVFunc:52
	vec2 n_in52p1 = vec2(1.00000, 1.00000);
	vec2 n_out52p0 = n_out54p0 * n_in52p1 + UV;


// UVFunc:74
	vec2 n_in74p1 = vec2(2.00000, 2.00000);
	vec2 n_in74p2 = vec2(0.00000, 0.00000);
	vec2 n_out74p0 = (n_out52p0 - n_in74p2) * n_in74p1 + n_in74p2;


	vec4 n_out59p0;
// Texture2D:59
	n_out59p0 = texture(noise, n_out74p0);


// FloatOp:80
	float n_in80p1 = 0.02000;
	float n_out80p0 = n_out53p0 * n_in80p1;


// VectorCompose:78
	float n_in78p0 = 0.00000;
	vec2 n_out78p0 = vec2(n_in78p0, n_out80p0);


// UVFunc:79
	vec2 n_in79p1 = vec2(1.00000, 1.00000);
	vec2 n_out79p0 = n_out78p0 * n_in79p1 + UV;


// UVFunc:81
	vec2 n_in81p1 = vec2(4.00000, 4.00000);
	vec2 n_in81p2 = vec2(0.00000, 0.00000);
	vec2 n_out81p0 = (n_out79p0 - n_in81p2) * n_in81p1 + n_in81p2;


	vec4 n_out77p0;
// Texture2D:77
	n_out77p0 = texture(noise, n_out81p0);


// Mix:76
	float n_in76p2 = 0.50000;
	vec3 n_out76p0 = mix(vec3(n_out59p0.xyz), vec3(n_out77p0.xyz), n_in76p2);


// Output:0
	ALBEDO = n_out23p0;
	ALPHA = n_out49p0;
	ROUGHNESS = n_out32p0;
	SPECULAR = n_out33p0;
	NORMAL = n_out82p0;
	NORMAL_MAP = n_out76p0;


}
"
modes/depth_draw = 1
modes/specular = 2
flags/shadows_disabled = true
nodes/vertex/0/position = Vector2(1760, 80)
nodes/vertex/2/node = SubResource("VisualShaderNodeTexture2DParameter_qs10t")
nodes/vertex/2/position = Vector2(-608.565, 286.397)
nodes/vertex/3/node = SubResource("VisualShaderNodeInput_joph6")
nodes/vertex/3/position = Vector2(-600, 120)
nodes/vertex/4/node = SubResource("VisualShaderNodeTexture_hmsgm")
nodes/vertex/4/position = Vector2(-140, 140)
nodes/vertex/5/node = SubResource("VisualShaderNodeFloatOp_qs10t")
nodes/vertex/5/position = Vector2(140, 280)
nodes/vertex/6/node = SubResource("VisualShaderNodeFloatParameter_ehfbu")
nodes/vertex/6/position = Vector2(-180, 560)
nodes/vertex/7/node = SubResource("VisualShaderNodeInput_2r3x5")
nodes/vertex/7/position = Vector2(-60, -40)
nodes/vertex/8/node = SubResource("VisualShaderNodeVectorOp_8r8td")
nodes/vertex/8/position = Vector2(360, 120)
nodes/vertex/9/node = SubResource("VisualShaderNodeVectorOp_e8st6")
nodes/vertex/9/position = Vector2(720, -60)
nodes/vertex/10/node = SubResource("VisualShaderNodeInput_hmsgm")
nodes/vertex/10/position = Vector2(300, -80)
nodes/vertex/12/node = SubResource("VisualShaderNodeExpression_16l0j")
nodes/vertex/12/position = Vector2(220, 640)
nodes/vertex/12/size = Vector2(1260, 540)
nodes/vertex/12/input_ports = "0,8,height_map;1,3,uv;"
nodes/vertex/12/output_ports = "0,4,normal;"
nodes/vertex/12/expression = "normal = getNormal(height_map, uv, 2.0 / 512.0);"
nodes/vertex/connections = PackedInt32Array(2, 0, 4, 2, 3, 0, 4, 0, 6, 0, 5, 1, 4, 1, 5, 0, 5, 0, 8, 1, 7, 0, 8, 0, 8, 0, 9, 1, 10, 0, 9, 0, 9, 0, 0, 0, 2, 0, 12, 0, 3, 0, 12, 1, 12, 0, 0, 1, 4, 4, 0, 7)
nodes/fragment/0/position = Vector2(2220, -20)
nodes/fragment/13/node = SubResource("VisualShaderNodeGlobalExpression_hmsgm")
nodes/fragment/13/position = Vector2(-3140, 60)
nodes/fragment/13/size = Vector2(960, 280)
nodes/fragment/13/input_ports = ""
nodes/fragment/13/output_ports = ""
nodes/fragment/13/expression = "vec3 getNormal(sampler2D height_map, vec2 uv, float texelSize) {
	vec4 s = textureGather(height_map, uv, 0);
	float t = s.r;
	float r = s.g;
	float l = s.b;
	float b = s.a;
    return -normalize(vec3(2.0 * (r - l), -4.0, 2.0 * (b - t)));
}
"
nodes/fragment/17/node = SubResource("VisualShaderNodeLinearSceneDepth_hmsgm")
nodes/fragment/17/position = Vector2(-500, 600)
nodes/fragment/18/node = SubResource("VisualShaderNodeExpression_qs10t")
nodes/fragment/18/position = Vector2(-300, 540)
nodes/fragment/18/size = Vector2(460, 340)
nodes/fragment/18/input_ports = "0,0,murkiness;1,0,linear_depth;"
nodes/fragment/18/output_ports = "0,0,depth;"
nodes/fragment/18/expression = "float d = linear_depth;
d = d + VERTEX.z;
depth = exp(-d * murkiness);"
nodes/fragment/19/node = SubResource("VisualShaderNodeMix_joph6")
nodes/fragment/19/position = Vector2(40, 240)
nodes/fragment/22/node = SubResource("VisualShaderNodeFloatConstant_joph6")
nodes/fragment/22/position = Vector2(1060, 400)
nodes/fragment/23/node = SubResource("VisualShaderNodeMix_hmsgm")
nodes/fragment/23/position = Vector2(1080, 20)
nodes/fragment/25/node = SubResource("VisualShaderNodeTexture_joph6")
nodes/fragment/25/position = Vector2(100, -120)
nodes/fragment/26/node = SubResource("VisualShaderNodeVectorOp_hmsgm")
nodes/fragment/26/position = Vector2(-400, -120)
nodes/fragment/27/node = SubResource("VisualShaderNodeInput_qs10t")
nodes/fragment/27/position = Vector2(-1060, 80)
nodes/fragment/28/node = SubResource("VisualShaderNodeVectorOp_joph6")
nodes/fragment/28/position = Vector2(-620, -140)
nodes/fragment/32/node = SubResource("VisualShaderNodeFloatConstant_jmbdl")
nodes/fragment/32/position = Vector2(1060, 500)
nodes/fragment/33/node = SubResource("VisualShaderNodeFloatConstant_gafow")
nodes/fragment/33/position = Vector2(1060, 600)
nodes/fragment/34/node = SubResource("VisualShaderNodeColorConstant_jmbdl")
nodes/fragment/34/position = Vector2(-300, 360)
nodes/fragment/35/node = SubResource("VisualShaderNodeColorConstant_gafow")
nodes/fragment/35/position = Vector2(-300, 260)
nodes/fragment/36/node = SubResource("VisualShaderNodeFloatConstant_mf4kj")
nodes/fragment/36/position = Vector2(-500, 520)
nodes/fragment/37/node = SubResource("VisualShaderNodeTexture_jmbdl")
nodes/fragment/37/position = Vector2(100, -400)
nodes/fragment/38/node = SubResource("VisualShaderNodeVectorOp_gafow")
nodes/fragment/38/position = Vector2(-140, -400)
nodes/fragment/39/node = SubResource("VisualShaderNodeVectorCompose_mf4kj")
nodes/fragment/39/position = Vector2(380, -140)
nodes/fragment/40/node = SubResource("VisualShaderNodeVectorCompose_uwb16")
nodes/fragment/40/position = Vector2(-340, -400)
nodes/fragment/41/node = SubResource("VisualShaderNodeFloatOp_lrui1")
nodes/fragment/41/position = Vector2(-1020, -520)
nodes/fragment/42/node = SubResource("VisualShaderNodeTexture_o57fn")
nodes/fragment/42/position = Vector2(100, -680)
nodes/fragment/43/node = SubResource("VisualShaderNodeVectorOp_wjknd")
nodes/fragment/43/position = Vector2(-140, -620)
nodes/fragment/44/node = SubResource("VisualShaderNodeVectorCompose_d0bd5")
nodes/fragment/44/position = Vector2(-340, -580)
nodes/fragment/45/node = SubResource("VisualShaderNodeFloatOp_8qfj3")
nodes/fragment/45/position = Vector2(-560, -540)
nodes/fragment/48/node = SubResource("VisualShaderNodeReroute_jmbdl")
nodes/fragment/48/position = Vector2(-680, 260)
nodes/fragment/49/node = SubResource("VisualShaderNodeProximityFade_gafow")
nodes/fragment/49/position = Vector2(1040, 300)
nodes/fragment/52/node = SubResource("VisualShaderNodeUVFunc_jmbdl")
nodes/fragment/52/position = Vector2(80, 1280)
nodes/fragment/53/node = SubResource("VisualShaderNodeInput_gafow")
nodes/fragment/53/position = Vector2(-780, 1560)
nodes/fragment/54/node = SubResource("VisualShaderNodeVectorCompose_lrui1")
nodes/fragment/54/position = Vector2(-220, 1420)
nodes/fragment/55/node = SubResource("VisualShaderNodeTexture2DParameter_o57fn")
nodes/fragment/55/position = Vector2(200, 860)
nodes/fragment/59/node = SubResource("VisualShaderNodeTexture_j2msl")
nodes/fragment/59/position = Vector2(720, 900)
nodes/fragment/60/node = SubResource("VisualShaderNodeFloatConstant_uwb16")
nodes/fragment/60/position = Vector2(-2220, -440)
nodes/fragment/61/node = SubResource("VisualShaderNodeVectorRefract_lrui1")
nodes/fragment/61/position = Vector2(-1000, -280)
nodes/fragment/62/node = SubResource("VisualShaderNodeExpression_jmbdl")
nodes/fragment/62/position = Vector2(-1340, -1160)
nodes/fragment/62/size = Vector2(980, 400)
nodes/fragment/62/input_ports = "0,3,screen_uv;1,4,normal;2,0,strength;3,6,is_depth_based;"
nodes/fragment/62/output_ports = "0,3,uv;"
nodes/fragment/62/expression = "float screen_center_distance = clamp(abs(length(screen_uv - vec2(0.5, 0.5))) * 2.0, 0.0, 1.0);
uv = vec2(screen_uv.x, screen_uv.y - (normal.y * strength / length(VERTEX)) * (1.0 - screen_center_distance));"
nodes/fragment/63/node = SubResource("VisualShaderNodeBooleanConstant_gafow")
nodes/fragment/63/position = Vector2(-1540, -880)
nodes/fragment/64/node = SubResource("VisualShaderNodeInput_mf4kj")
nodes/fragment/64/position = Vector2(-1680, -1080)
nodes/fragment/65/node = SubResource("VisualShaderNodeReroute_gafow")
nodes/fragment/65/position = Vector2(-120, -120)
nodes/fragment/66/node = SubResource("VisualShaderNodeFloatOp_jmbdl")
nodes/fragment/66/position = Vector2(-440, 1420)
nodes/fragment/67/node = SubResource("VisualShaderNodeVectorOp_jmbdl")
nodes/fragment/67/position = Vector2(580, -100)
nodes/fragment/68/node = SubResource("VisualShaderNodeFloatConstant_lrui1")
nodes/fragment/68/position = Vector2(380, 80)
nodes/fragment/69/node = SubResource("VisualShaderNodeProximityFade_jmbdl")
nodes/fragment/69/position = Vector2(-2240, -620)
nodes/fragment/70/node = SubResource("VisualShaderNodeReroute_mf4kj")
nodes/fragment/70/position = Vector2(-1700, -580)
nodes/fragment/71/node = SubResource("VisualShaderNodeFloatOp_uwb16")
nodes/fragment/71/position = Vector2(-1940, -640)
nodes/fragment/73/node = SubResource("VisualShaderNodeInput_jmbdl")
nodes/fragment/73/position = Vector2(-1300, 380)
nodes/fragment/74/node = SubResource("VisualShaderNodeUVFunc_gafow")
nodes/fragment/74/position = Vector2(380, 1260)
nodes/fragment/76/node = SubResource("VisualShaderNodeMix_mf4kj")
nodes/fragment/76/position = Vector2(1360, 860)
nodes/fragment/77/node = SubResource("VisualShaderNodeTexture_uwb16")
nodes/fragment/77/position = Vector2(740, 1300)
nodes/fragment/78/node = SubResource("VisualShaderNodeVectorCompose_o57fn")
nodes/fragment/78/position = Vector2(-220, 1600)
nodes/fragment/79/node = SubResource("VisualShaderNodeUVFunc_wjknd")
nodes/fragment/79/position = Vector2(120, 1540)
nodes/fragment/80/node = SubResource("VisualShaderNodeFloatOp_d0bd5")
nodes/fragment/80/position = Vector2(-440, 1640)
nodes/fragment/81/node = SubResource("VisualShaderNodeUVFunc_8qfj3")
nodes/fragment/81/position = Vector2(460, 1540)
nodes/fragment/82/node = SubResource("VisualShaderNodeInput_j2msl")
nodes/fragment/82/position = Vector2(960, 700)
nodes/fragment/83/node = SubResource("VisualShaderNodeInput_uwb16")
nodes/fragment/83/position = Vector2(1400, -360)
nodes/fragment/84/node = SubResource("VisualShaderNodeTexture2DParameter_jmbdl")
nodes/fragment/84/position = Vector2(1740, -520)
nodes/fragment/85/node = SubResource("VisualShaderNodeTexture_gafow")
nodes/fragment/85/position = Vector2(2140, -500)
nodes/fragment/connections = PackedInt32Array(17, 0, 18, 1, 18, 0, 19, 2, 27, 0, 26, 1, 28, 0, 26, 0, 19, 0, 23, 0, 34, 0, 19, 1, 35, 0, 19, 0, 36, 0, 18, 0, 38, 0, 37, 0, 40, 0, 38, 0, 43, 0, 42, 0, 44, 0, 43, 0, 42, 1, 39, 0, 41, 0, 45, 0, 45, 0, 44, 1, 45, 0, 40, 0, 18, 0, 45, 1, 37, 3, 39, 2, 25, 2, 39, 1, 48, 0, 28, 1, 55, 0, 59, 2, 60, 0, 28, 0, 63, 0, 62, 3, 64, 0, 62, 0, 48, 0, 62, 1, 65, 0, 38, 1, 65, 0, 43, 1, 62, 0, 65, 0, 66, 0, 54, 1, 68, 0, 67, 1, 70, 0, 62, 2, 60, 0, 71, 1, 71, 0, 70, 0, 69, 0, 71, 0, 65, 0, 25, 0, 32, 0, 0, 3, 33, 0, 0, 4, 18, 0, 23, 2, 49, 0, 0, 1, 67, 0, 23, 1, 39, 0, 67, 0, 73, 0, 48, 0, 52, 0, 74, 0, 74, 0, 59, 0, 54, 0, 52, 2, 53, 0, 66, 0, 59, 0, 76, 0, 55, 0, 77, 2, 77, 0, 76, 1, 78, 0, 79, 2, 53, 0, 80, 0, 80, 0, 78, 1, 79, 0, 81, 0, 81, 0, 77, 0, 82, 0, 0, 8, 76, 0, 0, 9, 84, 0, 85, 2, 23, 0, 0, 0)
nodes/light/4/node = SubResource("VisualShaderNodeGlobalExpression_jmbdl")
nodes/light/4/position = Vector2(-1640, -120)
nodes/light/4/size = Vector2(940, 1440)
nodes/light/4/input_ports = ""
nodes/light/4/output_ports = ""
nodes/light/4/expression = "float D_GGX(float cos_theta_m, float alpha)
{
float alpha2 = alpha * alpha;
float d = 1.0 + (alpha2 - 1.0) * cos_theta_m * cos_theta_m;
return alpha2 / (PI * d * d);
}

float G_GGX_2cos(float cos_theta_m, float alpha)
{
float k = 0.5 * alpha;
return 0.5 / (cos_theta_m * (1.0 - k) + k);
}

vec3 F0(float metallic, float specular, vec3 albedo)
{
float dielectric = 0.16 * specular * specular;
return mix(vec3(dielectric), albedo, vec3(metallic));
}


float SchlickFresnel(float u)
{
float m = 1.0 - u;
float m2 = m * m;
return m2 * m2 * m;
}

void light()
{
vec3 lightColor = LIGHT_COLOR.rgb / PI;
// Diffuse light.
float NdotL = max(dot(NORMAL, LIGHT.rgb), 0.0);
DIFFUSE_LIGHT += clamp(dot(NORMAL, LIGHT.rgb), 0.0, 1.0) * ATTENUATION * lightColor;

// Specular light.
vec3 halfway = normalize(VIEW + LIGHT.rgb);
float NdotH = max(dot(NORMAL, halfway), 0.0);
float LdotH = max(dot(LIGHT.rgb, halfway), 0.0);
float NdotV = max(dot(NORMAL, VIEW), 0.0);

float alpha_ggx = ROUGHNESS * ROUGHNESS;
float D = D_GGX(NdotH, alpha_ggx);
float G = G_GGX_2cos(NdotL, alpha_ggx) * G_GGX_2cos(NdotV, alpha_ggx);    

vec3 f0 = F0(METALLIC, SPECULAR_AMOUNT, ALBEDO);
float cLdotH5 = SchlickFresnel(LdotH);
vec3 F = mix(vec3(cLdotH5), vec3(1.0), f0);

vec3 specular_brdf_NL = NdotL * D * F * G;

float specular_blob_intensity = 0.25;
SPECULAR_LIGHT += specular_brdf_NL * LIGHT_COLOR * specular_blob_intensity * ATTENUATION;
}"
